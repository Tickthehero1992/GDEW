#ifndef __GDEWDOTDISP_H
#define __GDEWDOTDISP_H


#include "GDESPI.h"

#define GDEW_PAN_STG_CMD 0x00
#define GDEW_PWR_STG_CMD 0X01
#define GDEW_POWER_OFF_CMD 0X02
#define GDEW_POWER_OFF_SEQ_CMD 0X03
#define GDEW_POWER_ON_CMD 0X04
#define GDEW_POWER_ON_MESURE_CMD 0X05
#define GDEW_BOOSTED_SOFT_CMD 0X06
#define GDEW_DEEP_SLEEP_CMD 0X07
#define GDEW_DISPLAY_WRITE_CMD 0X10
#define GDEW_DISPLAY_WRITE_RED_CMD 0x13
#define GDEW_DATA_STOP_CMD 0X11
#define GDEW_DISPLAY_REFRESH_CMD 0X12
#define GDEW_LUTC_CMD 0X20
#define GDEW_LUTWW_CMD 0X21
#define GDEW_LUTBWR_CMD 0X22
#define GDEW_LUTWBW_CDM 0X23
#define GDEW_LUTBBB_CMD 0X24
#define GDEW_PLL_CNTL_CMD 0X30
#define GDEW_TEMP_CLB_CMD 0X40
#define GDEW_TEMP_SELECT_CMD 0X41
#define GDEW_TEMP_WRITE_CMD 0X42
#define GDEW_TEMP_READ_CMD 0X43
#define GDEW_VCOM_DATAITR_CMD 0X50
#define GDEW_LOW_POWER_CMD 0X51
#define GDEW_TCON_STN_CMD 0X60
#define GDEW_RSN_STN_CMD 0X61
#define GDEW_GET_STS_CMD 0X71
#define GDEW_AUTO_MSR_VCOM_CMD 0X80
#define GDEW_READ_VCOM_CMD 0X81
#define GDEW_VCM_DC_STN_CMD 0X82
#define GDEW_PRT_W_CMD 0X90
#define GDEW_PRT_IN_CMD 0X91
#define GDEW_PRT_OUT_CMD 0X92
#define GDEW_PROGRAM_MODE_CMD 0XA0
#define GDEW_ATV_PROGRAM_CMD 0XA1
#define GDEW_READ_OTP_CMD 0XA2
#define GDEW_PWR_SV_CMD 0XE3


/*******Functions***********/
#define GDEW_POWER_OFF(GDE) GDESPI_WRITE_CMD(GDE.SPI,GDEW_POWER_OFF_CMD)
#define GDEW_POWER_ON(GDE)  GDESPI_WRITE_CMD(GDE.SPI,GDEW_POWER_ON_CMD)
#define GDEW_POWER_ON_MESUARE(GDE) GDESPI_WRITE_CMD(GDE.SPI,GDEW_POWER_ON_MESURE_CMD)
#define GDEW_DEEP_SLEEP(GDE) {GDEW_POWER_OFF(GDE); GDEW_BUSY(GDE); \
	GDESPI_WRITE_CMD(GDE.SPI,GDEW_DEEP_SLEEP_CMD);GDESPI_WRITE_DATA(GDE.SPI,GDEW_DEEP_SLEEP_PRM);}
#define GDEW_DISPLAY_WRITE_BW(GDE) GDESPI_WRITE_CMD(GDE.SPI,GDEW_DISPLAY_WRITE_CMD)
#define GDEW_DISPLAY_WRITE_RED(GDE) GDESPI_WRITE_CMD(GDE.SPI,GDEW_DISPLAY_WRITE_RED_CMD);
#define GDEW_DATA_STOP(GDE)  GDESPI_WRITE_CMD(GDE.SPI,GDEW_DATA_STOP_CMD)
#define GDEW_DISPLAY_REFRESH(GDE) GDESPI_WRITE_CMD(GDE.SPI,GDEW_DISPLAY_REFRESH_CMD)
#define GDEW_VCOM_LUTC(GDE) GDESPI_WRITE_CMD(GDE.SPI,GDEW_LUTC_CMD)
#define GDEW_W2W_LUTWW(GDE) GDESPI_WRITE_CMD(GDE.SPI,GDEW_LUTWW_CMD)
#define GDEW_B2W_LUTBWR(GDE) GDESPI_WRITE_CMD(GDE.SPI,GDEW_LUTBWR_CMD)
#define GDEW_W2B_LUTWBW(GDE) GDESPI_WRITE_CMD(GDE.SPI,GDEW_LUTWBW_CDM)
#define GDEW_B2B_LUTBBB(GDE) GDESPI_WRITE_CMD(GDE.SPI,GDEW_LUTBBB_CMD)
#define GDEW_LOW_POWER_DETECTION(GDE) GDESPI_WRITE_CMD(GDE.SPI,GDEW_LOW_POWER_CMD)
#define GDEW_STS(GDE) GDESPI_WRITE_CMD(GDE.SPI,GDEW_GET_STS_CMD)
#define GDEW_READ_VCOM_VALUE(GDE) GDESPI_WRITE_CMD(GDE.SPI,GDEW_READ_VCOM_CMD)
#define GDEW_PARTIAL_MOD_SET(GDE) GDESPI_WRITE_CMD(GDE.SPI,GDEW_PRT_IN_CMD)
#define GDEW_PARTIAL_MOD_EXIT(GDE) GDESPI_WRITE_CMD(GDE.SPI,GDEW_PRT_OUT_CMD)
#define GDEW_PROGRAM_MODE(GDE) {GDESPI_WRITE_CMD(GDE.SPI,GDEW_PROGRAM_MODE_CMD);GDESPI_WRITE_DATA(GDE.SPI,0XA5);}
#define GDEW_ACTIVATE_PROGRAM(GDE)_OTP GDESPI_WRITE_CMD(GDE.SPI,GDEW_ATV_PROGRAM_CMD)

#define GDEW_LUT_WW_NUMBER 0x2B
#define GDEW_LUT_WB_NUMBER 0x2B
#define GDEW_LUT_BW_NUMBER 0x2B
#define GDEW_LUT_BB_NUMBER 0x2B
#define GDEW_LUT_VCOM_NUMBER 0x2D
/*******Settings*******/
typedef enum GDEW_RESOLUTION
{
	RES_96_230=0x00, //default
	RES_96_252=0X01,
	RES_128_296=0X02,
	RES_160_296=0X04
}GDEW_RESOLUTION;


typedef enum GDEW_LUT_SELECT
{
 LUT_OTP=0x00,//default
 LUT_REG=0x01
}GDEW_LUT_SELECT;

typedef enum GDEW_BWR
{
	PIXEL_BWR=0x00,//default
	PIXEL_BW=0x01
}GDEW_BWR;

typedef enum GDEW_GSD
{
	SCAN_DOWN=0x00,
	SCAN_UP=0x01 //default
}GDEW_GSD;


typedef enum GDEW_SHL
{
	SHIFT_LEFT=0x00,
	SHIFT_RIGHT=0x02 //default
}GDEW_SHL;

typedef enum GDEW_SHDN
{
	BOOST_OFF=0x00,
	BOOST_ON=0x01 //default
}GDEW_SHDN;

typedef enum GDEW_RST_P
{
 RST_LOW=0x00,
 RST_HIGH=0x01
}GDEW_RST_P;

typedef struct GDEW_PSR
{
	GDEW_RESOLUTION RES;
	GDEW_LUT_SELECT LUT_S;
	GDEW_BWR BWR;
	GDEW_GSD GSD;
	GDEW_SHL SHL;
	GDEW_SHDN SHDN;
	GDEW_RST_P RST;
}GDEW_PSR; //default 0X3F; {0X00; 0X01; 0X01; 0X01; 0X01; 0X01; 0X01; 0X01}
#define GDEW_PSR_DEFAULT {0X00, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01}
#define GDEW_PSR_DEFAULT_RST {0X00, 0X00, 0X01, 0X01, 0X01, 0X01, 0X01}

uint8_t GDEW_GET_PSR(GDEW_PSR);

/**Power settings***********/
typedef enum GDEW_VDS_VDG_EN
{
	VDS_SP_VDG_GP=0x00,
	VDS_SP_VDG_DC=0x01,
	VDS_DC_VDG_GP=0x02,
	VDS_DC_VDG_DC=0x04
}GDEW_VDS_VDG_EN;


typedef enum GDEW_VGHL_LV
{
	VGH_16_VGL_M16=0X00,
	VGH_15_VGL_M15=0X01,
	VGH_14_VGL_M14=0X02,
	VGH_13_VGH_M13=0X03
}GDEW_VGHL_LV;

typedef enum GDEW_VCOM_HV
{
	VDHL=0x00,
	VCOML=0x01
}GDEW_VCOM_HV;

uint8_t GDEW_VD_RET(float);

typedef struct GDEW_POWER
{
	GDEW_VDS_VDG_EN VDS_VDG;
	GDEW_VGHL_LV VGHL;
	GDEW_VCOM_HV VCOM_HV;
	uint8_t VDH_l;
	uint8_t VDL_l;
	uint8_t VDHR_l;
}GDEW_POWER;/***default 0x03,0x00,0x2b(-11),0x2b(-11),0x13(9.0)****/

#define GDEW_POWER_DEFAULT {0x03,0x00,0x2b,0x2b,0x13}
/****POWER Off sequence settings****/
typedef enum GDEW_PWR_SEQ_SET
{
	Frame_1=0x00,
	Frame_2=0x01,
	Frame_3=0x02,
	Frame_4=0x04
}GDEW_PWR_SEQ_SET;

/*************BOOST parameters********************/

typedef struct GDEW_BST_STR
{
	uint8_t PHASE_A;
	uint8_t PHASE_B;
	uint8_t PHASE_C;
}GDEW_BST_STR; /**default 0x17, 0x17, 0x17*/
#define GDEW_BST_DEFAULT {0x17,0x17,0x17}
/*****Sleeep parameter******/
#define GDEW_DEEP_SLEEP_PRM 0xA5

/****PLL CONTROL************/
typedef enum GDEW_PLL
{
	HZ_29=0x09,
	HZ_14=0x0A,
	HZ_10=0x0B,
	HZ_07=0x0C,
	HZ_06=0x0D,
	HZ_05=0x0E,
	HZ_04=0x0F,

	HZ_57=0x11,
	HZ_29_1=0x12,
	HZ_19=0x13,
	HZ_14_1=0x14,
	HZ_11=0x15,
	HZ_10_1=0x16,
	HZ_08=0x17,

	HZ_86=0x19,
	HZ_43=0x1A,
	HZ_29_2=0x1B,
	HZ_21=0x1C,
	HZ_17=0x1D,
	HZ_14_2=0x1E,
	HZ_12=0x1F,

	HZ_114=0x21,
	HZ_57_1=0x22,
	HZ_38=0x23,
	HZ_29_3=0x24,
	HZ_23=0x25,
	HZ_19_1=0x26,
	HZ_16=0x27,

	HZ_150=0x29,
	HZ_72=0x2A,
	HZ_48=0x2B,
	HZ_36=0x2C,
	HZ_29_4=0x2D,
	HZ_24=0x2E,
	HZ_20=0x2F,

	HZ_171=0x31,
	HZ_86_1=0x32,
	HZ_57_2=0x33,
	HZ_43_1=0x34,
	HZ_34=0x35,
	HZ_29_5=0x36,
	HZ_24_1=0x37,

	HZ_200=0x39,
	HZ_100=0x3A,
	HZ_67=0x3B,
	HZ_50=0x3C, //default
	HZ_40=0x3D,
	HZ_33=0x3E,
	HZ_29_6=0x3F
}GDEW_PLL;
#define GDEW_PLL_DEFAULT HZ_50
/**********************Temperature sensor read*******/
int GDEW_READ_TEMPERATURE();

#define GDEW_TEMP_SENS_SWITCH 1<<7

uint8_t GDEW_TEMP_OFFSET(int A);


typedef enum GDEW_I2C_WBN
{
	GDEW_I2C_BYTE_1=0x00,
	GDEW_I2C_BYTE_2=0x01,
	GDEW_I2C_BYTE_3=0x02,
	GDEW_I2C_BYTE_4=0x03
}GDEW_I2C_WBN;



typedef struct GDEW_TEMP_SENSOR_WRITES
{
	GDEW_I2C_WBN WBN;
	uint8_t GDEW_I2C_DFN_ADDR;
	uint8_t GDEW_I2C_PNT_SETTINGS;
	uint8_t GDEW_I2C_WMSB;
	uint8_t GDEW_I2C_WLSB;
}GDEW_TEMP_SENSOR_WRITES;



typedef struct GDEW_TEMP_SENSOR_READ
{
	uint8_t RMSB;
	uint8_t RLSB;
}GDEW_TEMP_SENSOR_READ;

/***********VCOM and Data Settings*****/
/*	LUT PALLET
 * D00_LUTW_1=0X00,
	D00_LUTR=0X40,
	D00_LUTW=0X80,
	D00_LUTB=0XC0,

	D01_LUTB_1=0X10,//default
	D01_LUTW_1=0X50,//default
	D01_LUTR_1=0XA0,//default
	D01_LUTR_2=0XD0,//default

	D10_LUTR_3=0X20,
	D10_LUTR_4=0X60,
	D10_LUTW_2=0XA0,
	D10_LUTB_2=0XE0,

	D11_LUTR_5=0X30,
	D11_LUTR_6=0X70,
	D11_LUTB_3=0XB0,
	D11_LUTW_3=0XF0
*/
typedef enum GDEW_VBD_BWR_0
{
	D0FLOATING=0X00,
	D0LUTR=0X40,
	D0LUTW=0X80,
	D0LUTB=0XC0,

	D1LUTB=0X10,//default
	D1LUTW=0X50,//default
	D1LUTR=0X90,//default
	D1FOLATING=0XD0//default

}GDEW_VBD_BWR_0;

typedef enum GDEW_VBD_BWR_1
{
	D0FLOATING_BWR1=0X00,
	D0LUTBW_BWR1=0X40,
	D0LUTWB_BWR1=0X80,
	D0LUTFLOATING_BWR1=0XC0,

	D1FLOATING_BWR1=0X10, //default
	D1LUTWB_BWR1=0X50,//default
	D1LUTBW_BWR1=0X90,//default
	D1FLOATING_1_BWR1=0XD0//default
}GDEW_VBD_BWR_1;

uint8_t GDEW_CDI(uint8_t number);//number==10 default

typedef struct GDEW_VCOM_DATA
{
	uint8_t VBD;
	uint8_t DDX;
	uint8_t CDI;
}GDEW_VCOM_DATA; //default 0x10; 0x01; 0x0F
#define GDEW_VCOM_DATA_DEFAULT {0x10,0x01,0x0F}
/****TCON SETTINGS********/


/*************Auto measuring vcom************/
#define GDEW_AUTO_MSR_VCOM_DEFAULT 0x10
typedef enum GDEW_AUTO_MSR_VCOM_AMVT
{
	SECONDS_3=0X00,
	SECONDS_5=0X01,
	SECONDS_8=0X02,
	SECONDS_10=0X03
}GDEW_AUTO_MSR_VCOM_AMVT;

typedef struct GDEW_AUTO_MSR_VCOM
{
	GDEW_AUTO_MSR_VCOM_AMVT AMVT;
	uint8_t XON;
	uint8_t AMVS;
	uint8_t AMV;
	uint8_t AMVE;
}GDEW_AUTO_MSR_VCOM;



/*****DISPLAY STRUCT*******/
typedef struct GDEW
{
	uint8_t connect_type;
	uint8_t height;
	uint16_t width;
	GDEW_PSR PSR;
	GDEW_POWER POWER;
	GDEW_BST_STR BST;
	GDEW_PLL PLL;
	GDEW_VCOM_DATA VCOM;
	GDESPI SPI;

}GDEW;

/****Functions*****/
void GDEW_BUSY(GDEW);
void GDEW_INIT(GDEW);
uint8_t GDEW_GET_PSR(GDEW_PSR);
void GDEW_PWR_SETTINGS(GDEW,GDEW_POWER);
void GDEW_POWER_OFF_SEQ(GDEW,GDEW_PWR_SEQ_SET);
void GDEW_BOOST_START(GDEW,GDEW_BST_STR);
void GDEW_PLL_CNTL(GDEW, GDEW_PLL);
void GDEW_SELECT_T_SENS(GDEW,uint8_t,int);
void GDEW_T_SENSOR_WRITE(GDEW,GDEW_TEMP_SENSOR_WRITES);
void GDEW_VCOM_DATA_SETTINGS(GDEW,GDEW_VCOM_DATA);
void GDEW_TCON_SETTINGS(GDEW,uint8_t);
void GDEW_RESOLUTION_SETUP(GDEW,uint16_t, uint8_t);
void GDEW_AUTO_MESUARE(GDEW,GDEW_AUTO_MSR_VCOM);
void GDEW_VCM_DC_STN(GDEW,float);
void GDEW_PARTIAL_WINDOW_SELECT(GDEW,uint8_t, uint8_t ,uint16_t, uint16_t, uint8_t);
void GDEW_READ_OTP();
uint8_t GDEW_CDI(uint8_t);
uint8_t GDEW_TEMP_OFFSET(int );
void GDEW_LUT_PALET(GDEW);
void GDEW_PICTURE_WRITE(GDEW,uint8_t*, uint8_t*, uint8_t, uint16_t);
void GDEW_DISPLAY_CLEAR(GDEW);

#endif
